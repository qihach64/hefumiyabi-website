generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  email         String?         @unique
  emailVerified DateTime?
  phone         String?         @unique
  phoneVerified DateTime?
  passwordHash  String?
  name          String?
  avatar        String?
  role          Role            @default(USER)
  language      Language        @default(ZH)
  birthday      DateTime?
  gender        Gender?
  source        String?
  referralCode  String?         @unique
  referredBy    String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  bookings      Booking[]
  cart          Cart?
  favorites     Favorite[]
  reviews       Review[]
  sessions      Session[]
  behaviors     UserBehavior[]
  preference    UserPreference?
  referrer      User?           @relation("Referrals", fields: [referredBy], references: [id])
  referrals     User[]          @relation("Referrals")

  @@index([email])
  @@index([phone])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model UserPreference {
  id                String   @id @default(cuid())
  userId            String   @unique
  preferredStyles   String[]
  preferredColors   String[]
  preferredPatterns String[]
  height            Int?
  shoeSize          Float?
  emailNotification Boolean  @default(true)
  smsNotification   Boolean  @default(false)
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model Kimono {
  id           String          @id @default(cuid())
  code         String          @unique
  name         String
  nameEn       String?
  description  String?
  category     KimonoCategory
  style        String
  color        String[]
  pattern      String[]
  season       Season[]
  size         String
  isAvailable  Boolean         @default(true)
  viewCount    Int             @default(0)
  bookingCount Int             @default(0)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  bookings     BookingKimono[]
  favorites    Favorite[]
  images       KimonoImage[]
  stores       KimonoStore[]

  @@index([category])
  @@index([isAvailable])
  @@map("kimonos")
}

model KimonoImage {
  id       String  @id @default(cuid())
  kimonoId String
  url      String
  alt      String?
  order    Int     @default(0)
  kimono   Kimono  @relation(fields: [kimonoId], references: [id], onDelete: Cascade)

  @@map("kimono_images")
}

model Store {
  id           String        @id @default(cuid())
  slug         String        @unique
  name         String
  nameEn       String?
  city         String
  address      String
  addressEn    String?
  phone        String?
  email        String?
  latitude     Float?
  longitude    Float?
  openingHours Json?
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  bookingItems BookingItem[]
  kimonos      KimonoStore[]

  @@map("stores")
}

model KimonoStore {
  id       String @id @default(cuid())
  kimonoId String
  storeId  String
  quantity Int    @default(1)
  kimono   Kimono @relation(fields: [kimonoId], references: [id], onDelete: Cascade)
  store    Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([kimonoId, storeId])
  @@map("kimono_stores")
}

model RentalPlan {
  id            String        @id @default(cuid())
  slug          String        @unique
  name          String
  nameEn        String?
  description   String
  category      PlanCategory
  price         Int
  originalPrice Int?
  depositAmount Int           @default(0)
  duration      Int
  includes      String[]
  imageUrl      String?
  
  // 店铺和地区信息
  storeName String?
  region    String?
  tags      String[]      @default([])
  
  // 活动关联（新增）
  campaignId String?
  campaign   Campaign? @relation(fields: [campaignId], references: [id], onDelete: SetNull)
  
  // 活动特性（新增）
  isCampaign      Boolean @default(false)
  isLimited       Boolean @default(false)
  maxBookings     Int?
  currentBookings Int     @default(0)
  
  // 时间限制（新增）
  availableFrom  DateTime?
  availableUntil DateTime?
  
  isActive   Boolean @default(true)
  isFeatured Boolean @default(false)
  
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  
  // 关联
  bookingItems BookingItem[]
  cartItems    CartItem[]

  @@index([campaignId])
  @@index([isCampaign])
  @@index([availableFrom, availableUntil])
  @@map("rental_plans")
}

model Cart {
  id        String     @id @default(cuid())
  userId    String?    @unique
  sessionId String?    @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  expiresAt DateTime
  items     CartItem[]
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionId])
  @@index([expiresAt])
  @@map("carts")
}

model CartItem {
  id             String      @id @default(cuid())
  cartId         String
  type           String
  planId         String?
  campaignPlanId String?
  quantity       Int         @default(1)
  addOns         String[]
  notes          String?
  createdAt      DateTime    @default(now())
  cart           Cart        @relation(fields: [cartId], references: [id], onDelete: Cascade)
  plan           RentalPlan? @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@map("cart_items")
}

model Booking {
  id              String        @id @default(cuid())
  userId          String?
  guestName       String?
  guestEmail      String?
  guestPhone      String?
  totalAmount     Int
  depositAmount   Int
  paidAmount      Int           @default(0)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?
  status          BookingStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  specialRequests String?
  visitDate       DateTime
  visitTime       String
  items           BookingItem[]
  user            User?         @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([visitDate])
  @@index([status])
  @@map("bookings")
}

model BookingItem {
  id             String          @id @default(cuid())
  bookingId      String
  storeId        String
  type           String
  planId         String?
  campaignPlanId String?
  quantity       Int             @default(1)
  unitPrice      Int
  totalPrice     Int
  addOns         String[]
  notes          String?
  createdAt      DateTime        @default(now())
  booking        Booking         @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  plan           RentalPlan?     @relation(fields: [planId], references: [id])
  store          Store           @relation(fields: [storeId], references: [id])
  kimonos        BookingKimono[]

  @@index([storeId])
  @@map("booking_items")
}

model BookingKimono {
  id            String      @id @default(cuid())
  kimonoId      String
  bookingItemId String
  bookingItem   BookingItem @relation(fields: [bookingItemId], references: [id], onDelete: Cascade)
  kimono        Kimono      @relation(fields: [kimonoId], references: [id])

  @@map("booking_kimonos")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  kimonoId  String
  createdAt DateTime @default(now())
  kimono    Kimono   @relation(fields: [kimonoId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, kimonoId])
  @@map("favorites")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  bookingId String?
  rating    Int
  comment   String
  images    String[]
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model UserBehavior {
  id        String        @id @default(cuid())
  userId    String?
  event     BehaviorEvent
  page      String?
  kimonoId  String?
  userAgent String?
  ipAddress String?
  metadata  Json?
  createdAt DateTime      @default(now())
  user      User?         @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([event])
  @@index([createdAt])
  @@map("user_behaviors")
}

model Campaign {
  id             String         @id @default(cuid())
  slug           String         @unique
  title          String
  titleEn        String?
  description    String
  subtitle       String?
  startDate      DateTime
  endDate        DateTime
  usageStartDate DateTime?
  usageEndDate   DateTime?
  isActive       Boolean        @default(true)
  isPinned       Boolean        @default(false)
  priority       Int            @default(0)
  coverImage     String?
  bannerImage    String?
  type           CampaignType   @default(DISCOUNT)
  restrictions   String[]
  terms          String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  campaignPlans  CampaignPlan[]
  rentalPlans    RentalPlan[]   // 新增：统一套餐系统

  @@index([isActive])
  @@index([startDate, endDate])
  @@map("campaigns")
}

model CampaignPlan {
  id               String   @id @default(cuid())
  campaignId       String
  name             String
  nameEn           String?
  description      String
  originalPrice    Int
  campaignPrice    Int
  duration         Int?
  includes         String[]
  applicableStores String[]
  images           String[]
  maxBookings      Int?
  currentBookings  Int      @default(0)
  isFeatured       Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  region           String?
  storeName        String?
  tags             String[] @default([])
  campaign         Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([campaignId])
  @@map("campaign_plans")
}

enum Role {
  USER
  ADMIN
  STAFF
}

enum Language {
  JA
  EN
  ZH
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum KimonoCategory {
  WOMEN
  MEN
  CHILDREN
}

enum Season {
  SPRING
  SUMMER
  AUTUMN
  WINTER
  ALL_SEASON
}

enum PlanCategory {
  LADIES
  MENS
  COUPLE
  FAMILY
  GROUP
  SPECIAL
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  PARTIAL
  PAID
  REFUNDED
}

enum BehaviorEvent {
  PAGE_VIEW
  KIMONO_VIEW
  KIMONO_FAVORITE
  BOOKING_START
  BOOKING_COMPLETE
}

enum CampaignType {
  DISCOUNT
  ANNIVERSARY
  SEASONAL
  FLASH_SALE
  GROUP_BUY
  EARLY_BIRD
  SPECIAL
}

// 社交媒体帖子
model SocialPost {
  id          String         @id @default(cuid())
  platform    SocialPlatform // Instagram, Facebook, 微博
  postId      String         @unique // 原平台的帖子ID
  postUrl     String         // 帖子链接

  // 内容
  content     String?        @db.Text // 帖子文字内容
  images      String[]       // 图片URL数组

  // 作者信息
  authorName  String         // 发帖人名称
  authorAvatar String?       // 发帖人头像

  // 互动数据
  likes       Int            @default(0)
  comments    Int            @default(0)
  shares      Int            @default(0)

  // 元数据
  postedAt    DateTime       // 发帖时间
  scrapedAt   DateTime       @default(now()) // 爬取时间

  // 是否在首页展示
  isFeatured  Boolean        @default(false)
  displayOrder Int?          // 展示顺序（数字越小越靠前）

  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([platform])
  @@index([isFeatured, displayOrder])
  @@map("social_posts")
}

enum SocialPlatform {
  INSTAGRAM
  FACEBOOK
  WEIBO
}
